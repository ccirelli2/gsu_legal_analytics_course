# Create Copy
df.copy   <- copy(df)
# Get Count All Data By Data
ts_all <- df %>% group_by(Year) %>% tally()
# Limit Copy Data Frame by Auto Sales
AutoTheft   <- data$UCR.Literal=='AUTO THEFT'
df.auto     <- data[AutoTheft, c('Year')]
df.auto     <- df.auto %>% group_by(Year) %>% tally()
# Plot & Compare
plot(ts_all)
}
plot_auto_vs_all(data)
plot_auto_vs_all <- function(df){
# Add Year
df$Year   <- format(as.Date(df$Occur.Date, '%Y-%m-%d'), "%Y")
min.yr    <- df$Year > 2008
df        <- df[min.yr, names(df)]
# Create Copy
df.copy   <- df
# Get Count All Data By Data
ts_all <- df %>% group_by(Year) %>% tally()
# Limit Copy Data Frame by Auto Sales
AutoTheft   <- df$UCR.Literal=='AUTO THEFT'
df.auto     <- df[AutoTheft, c('Year')]
df.auto     <- df.auto %>% group_by(Year) %>% tally()
# Plot & Compare
plot(ts_all)
}
plot_auto_vs_all(data)
# Add Year
df <- data
df$Year   <- format(as.Date(df$Occur.Date, '%Y-%m-%d'), "%Y")
min.yr    <- df$Year > 2008
df        <- df[min.yr, names(df)]
# Create Copy
df.copy   <- df
# Get Count All Data By Data
ts_all <- df %>% group_by(Year) %>% tally()
# Limit Copy Data Frame by Auto Sales
AutoTheft   <- df$UCR.Literal=='AUTO THEFT'
df.auto     <- df[AutoTheft, c('Year')]
df.auto     <- df.auto %>% group_by(Year) %>% tally()
df.auto
# Limit Copy Data Frame by Auto Sales
AutoTheft   <- df$UCR.Literal=='AUTO THEFT'
df.auto     <- df[AutoTheft]
df.auto     <- df[AutoTheft, .]
df.auto     <- df[AutoTheft, c(col_names)]
df.auto     <- df.auto %>% group_by(Year) %>% tally()
# Limit Copy Data Frame by Auto Sales
AutoTheft    <- df$UCR.Literal=='AUTO THEFT'
df.auto      <- df[AutoTheft, c(col_names)]
df.auto$Year <- format(as.Date(df.auto$Occur.Date, '%Y-%m-%d'), "%Y")
df.auto$Year
df.auto      <- df.auto %>% group_by(Year) %>% tally()
# Plot & Compare
plot(ts_all)
# Plot & Compare
barplot(ts_all)
# Plot & Compare
barchart(ts_all)
# Plot & Compare
barplot(ts_all)
# Plot & Compare
df.auto$Year
barplot(df.auto$Year, ts_all)
barplot(df.auto$Year, ts_all$n)
ts_all$n
barplot(df.auto)
?barplot
barplot(df.auto$n)
barplot(df.auto$n, df.auto$Year)
?barplot
barplot(df.auto$n, names.arg=df.auto$Year)
barplot(ts_all$n, names.arg=ts_all$Year)
barplot(df.auto$n, names.arg=df.auto$Year)
# Combine Data
df_all = data.frame()
df_all$AllCrime <- ts_all$n
# Combine Data
df_all = data.frame()
df_all$Year = ts_all$Year
# Combine Data
df_all = data.frame(ts_all, df.auto)
df_all
df_all$Year.1 <- NULL
df_all
df_all$All <- df_all$n
df_all$n <- NULL
df_all$Auto <- df_all$n.1
df_all$n.1 <- NULL
ggplot(df_all, aes(x=Year, y=All, fill=Auto)) + geom_bar(stat='identity', position='dodge') +
theme(axis.text.x = element_text(angle=90))
ggplot(df_all, aes(x=Year, y=All)) + geom_bar(stat='identity', position='dodge') + geom_bar(aes(x=Year, y=Auto)) +
theme(axis.text.x = element_text(angle=90))
ggplot(df_all, aes(x=Year, y=All)) + geom_bar(stat='identity', position='dodge') + geom_bar(aes(x=Year, y=Auto))
ggplot(df_all, aes(x=Year, y=All)) + geom_bar(stat='identity', position='dodge') + geom_bar(aes(x=Year, y=Auto),
stat='identity'
ggplot(df_all, aes(x=Year, y=All)) + geom_bar(stat='identity', position='dodge') + geom_bar(aes(x=Year, y=Auto),
stat='identity') +
theme(axis.text.x=element_text(angle=90))
ggplot(df_all, aes(x=Year, y=All)) + geom_bar(stat='identity', position='dodge') + geom_bar(aes(x=Year, y=Auto),
stat='identity') +
theme(axis.text.x=element_text(angle=90))
ggplot(df_all, aes(x=Year, y=All)) + geom_line()
ggplot(df_all, aes(x=Year, y=All)) + geom_line() + geom_point()
ggplot(df_all, aes(x=Year, y=All)) + geom_line(aes(x=Year, y=Auto)) + geom_point()
ggplot(df_all, aes(x=Year, y=All)) + geom_line(df_all, aes(x=Year, y=Auto)) + geom_point()
plot(df_all)
plot(df_all$All)
line(df_all$Auto)
plot(df_all$All)
line(df_all$Auto)
plot(df_all$All)
lines(df_all$Auto)
plot(df_all$All, type='l')
lines(df_all$Auto)
lines(df_all$Auto, color='green')
lines(df_all$Auto, col='green')
barplot(df_all)
barplot(df_all$All)
?bar
?barplot
barplot(df_all$All, names.arg=df_all$Year)
barplot(df_all$All, names.arg=df_all$Year, main='Frequency All Crime')
barplot(df_all$Auto, names.arg=df_all$Year, main='Frequency Auto Theft')
bar(df_all$Auto, names.arg=df_all$Year, main='Frequency Auto Theft')
bar
?bar
?barplot
plot.comp.auto.all(data, col_names)
plot.comp.auto.all <- function(data, col_names){
# Add Year
df$Year   <- format(as.Date(df$Occur.Date, '%Y-%m-%d'), "%Y")
min.yr    <- df$Year > 2008
df        <- df[min.yr, names(df)]
# Get Count All Data By Data
ts_all <- df %>% group_by(Year) %>% tally()
# Limit Copy Data Frame by Auto Sales
AutoTheft    <- df$UCR.Literal=='AUTO THEFT'
df.auto      <- df[AutoTheft, c(col_names)]
df.auto$Year <- format(as.Date(df.auto$Occur.Date, '%Y-%m-%d'), "%Y")
df.auto      <- df.auto %>% group_by(Year) %>% tally()
# Combine Data
df_all = data.frame(ts_all, df.auto)
df_all$Year.1 <- NULL
df_all$All <- df_all$n
df_all$n <- NULL
df_all$Auto <- df_all$n.1
df_all$n.1 <- NULL
barplot(df_all$All, names.arg=df_all$Year, main='Frequency All Crime')
bar(df_all$Auto, names.arg=df_all$Year, main='Frequency Auto Theft')
}
plot.comp.auto.all(data, col_names)
## Clear Namespace --------------------------------------------------
rm(list=ls())
## Load Libraries ---------------------------------------------------
source('/home/cc2/Desktop/repositories/ts_finalproject/data_inspection.R')
library(dplyr)
library(ggplot2)
library(astsa)
library(forecast)
library(Hmisc)
library(tseries)
## Load Data --------------------------------------------------------
' data source:  http://opendataportal.azurewebsites.us/
description:  Atlanta Crime Data'
data <- read.csv('/home/cc2/Desktop/repositories/ts_finalproject/data/data.csv')
## Data Inspection --------------------------------------------------
'  Observations:  Data set contains temporal, continuous, ordinar and categoricla data.
Missing data:  Apartment Offic Prefix looks like it has missing values.
Target:        UCR.Literal
'
data_dict <- get_data_dict()
col_names = names(data)
col_names
head(data)
## Plot All Data ---------------------------------------------------
plot.comp.auto.all(data, col_names)
# Inspection Auto Thefts
AutoTheft   <- data$UCR.Literal=='AUTO THEFT'
data.at     <- data[AutoTheft, c('Occur.Date', 'Occur.Time', 'Beat', 'Shift.Occurence', 'Location.Type',
'Neighborhood', 'Latitude', 'Longitude')]
summary(data.at)
# Transform Columns
' Observations:  The minimum of the occurance date is 1916, which does not comport with the
study which should have been from 2009 at the earliest
Null/Missing   Neighborhood = 1941
'
data.at$Occur.Date <- as.Date(data.at$Occur.Date, '%Y-%m-%d')
data.at$Year       <- format(as.Date(data.at$Occur.Date, '%Y-%m-%d'), "%Y")
data.at$Month      <- format(as.Date(data.at$Occur.Date, '%Y-%m-%d'), "%m")
data.at$Day        <- format(as.Date(data.at$Occur.Date, '%Y-%m-%d'), "%d")
data.at$Hour       <- substr(data.at$Occur.Time, 1,2)
data.at$Count      <- rep(1, length(data.at$Year))
data.at$Occur.Time <- NULL
col_names <- names(data.at)
min.yr             <- data.at$Year > 2008
data.at            <- data.at[min.yr, names(data.at)]
min(data.at$Year)
summary(data.at)
auto.arima.6  <- auto.arima(ts.6, trace=TRUE, ic='bic')
auto.arima.12 <- auto.arima(ts.12, trace=TRUE, ic='bic')
ts.6 <- ts(date.cnt$n, start=c(2009, 01 ,01), end=c(2019, 12,31), frequency=6)
ts.12  <- ts(date.cnt$n, start=c(2009, 01 ,01), end=c(2019, 12,31), frequency=12)
# Visualize Data -----------------------------------------------------------------------------------------
' Observations:  Vizualizing the monthly plot reveals what appears to be a cycle that repeats every
6 months.  From February to July auto thefts show a constant increase until a pique in
July.  From July to January shows a stretched out parabola shape (elongated u shape).
'
date.cnt  <- data.at %>% group_by(Occur.Date) %>% tally()
yr.cnt    <- data.at %>% group_by(Year) %>% tally()
month.cnt <- data.at %>% group_by(Month) %>% tally()
day.cnt   <- data.at %>% group_by(Day) %>% tally()
hour.cnt  <- data.at %>% group_by(Hour) %>% tally()
plt.date  <- ggplot(date.cnt, aes(x=Occur.Date, y=n)) + geom_bar(stat='identity') + ggtitle("Count of Auto Thefts By Date")
plt.yr    <- ggplot(yr.cnt, aes(x=Year, y=n)) + geom_bar(stat='identity') + ggtitle("Count of Auto Thefts By Year")
plt.month <- ggplot(month.cnt, aes(x=Month, y=n)) + geom_bar(stat='identity') + ggtitle("Count of Auto Thefts By Month")
plt.day   <- ggplot(day.cnt, aes(x=Day, y=n)) + geom_bar(stat='identity') + ggtitle("Count of Auto Thefts By Day")
plt.hour  <- ggplot(hour.cnt, aes(x=Hour, y=n)) + geom_bar(stat='identity') + ggtitle("Count of Auto Thefts By Hour")
# Plots that show 6 month cycle
plt.month
plot(x=seq(1,length(month.cnt$n)), y=month.cnt$n, 'l')
# Stationarity --------------------------------------------------------------------------------------------
ts.12 <- ts(date.cnt$n, start=c(2009, 01 ,01), end=c(2019, 12,31), frequency=12)
monthplot(ts.12, main='Stationarity Test - Monthly Plot of Mean Count - Frequency =12')
ts.6 <- ts(date.cnt$n, start=c(2009, 01 ,01), end=c(2019, 12,31), frequency=6)
monthplot(ts.6, main='Stationarity Test - Monthly Plot of Mean Count - Frequency =6')
#****** Take Log of data to see difference in mean.
x         <- seq(1, length(ts.12))
ts.12.log <- log(ts.12)
ts.6.log  <- log(ts.6)
par(mfrow=c(2,1))
plot(x=x, y=ts.12, col='green', type='l')
plot(x=x, y=ts.12.log, col='red', type='l')
x         <- seq(1, length(ts.6))
plot(x=x, y=ts.6, col='green', type='l')
plot(x=x, y=ts.6.log, col='red', type='l')
# Check if variance is constant
par(mfrow=c(1,1))
h1 = ts.6[1: round(length(ts.6 *.5))]
h2 = ts.6[36: length(ts.6)]
v1 = var(h1)
v2 = var(h2)
?barplot
barplot(height=c(v1, v2), names.arg=c('v1', 'v2'), main='Compare Varianc e- 1st Half vs 2nd Half')
# Take Log and Check Variance Again
h1.log <- log(h1)
h2.log <- log(h2)
v1.log <- var(h1.log)
v2.log <- var(h2.log)
barplot(height=c(v1.log, v2.log), names.arg=c('v1', 'v2'), main='Compare Varianc - Log 1st Half vs 2nd Half')
# Stationarity - ACF & PACF Plots -------------------------------------------------------------------------
# Create Time Series
ts.6 <- ts(date.cnt$n, start=c(2009, 01 ,01), end=c(2019, 12,31), frequency=6)
ts.12  <- ts(date.cnt$n, start=c(2009, 01 ,01), end=c(2019, 12,31), frequency=12)
auto.arima.6  <- auto.arima(ts.6, trace=TRUE, ic='bic')
auto.arima.12 <- auto.arima(ts.12, trace=TRUE, ic='bic')
ts.6.log     <- log(ts.6)
ts.12.log    <- log(ts.12)
auto.arima.6 <- auto.arima(ts.6.log, trace=TRUE, ic='bic')
auto.arima.12 <- auto.arima(ts.12.log, trace=TRUE, ic='bic')
# Train Test Split
train.sample <- round(0.7 * length(ts.12.log))
test.sample  <- length(ts.12.log) - train.sample
# Train Sarima Model (Order = 032 130 6)
sarima.12.fit  <- arima(ts.train, order=c(0,1,2), seasonal = list(order=c(2,2,1), period=6))
ts.train <-  ts.6[1: train.sample]
ts.test  <-  ts.6[51: length(ts.6)]
# Train Sarima Model (Order = 032 130 6)
sarima.12.fit  <- arima(ts.train, order=c(0,1,2), seasonal = list(order=c(2,2,1), period=6))
summary(sarima.6.fit)
summary(sarima.12.fit)
sarima.12.pred <- predict(sarima.6.fit, length(ts.test))
summary(sarima.12.fit)
sarima.12.pred <- predict(sarima.12.fit, length(ts.test))
sarima.12.pred <- predict(sarima.12.fit, length(ts.test))
# Plot Prediction Vs Actual
x = seq(1, test.sample)
plot(x=x, y=sarima.12.pred$pred, col='blue', type='l', xlab='Time', ylab='Count Auto Theft', main='SARIMA (0,1,2)(2,2,1)x6 - Prediction vs Actual')
# Calculate RMSE
sarima.12.mse <- sum((sarima.6.pred$pred - ts.test)**2) / length(sarima.6.pred$pred)
sarima.12.mse
# Calculate RMSE
sarima.12.mse <- sum((sarima.6.pred$pred - ts.test)**2) / length(sarima.6.pred$pred)
# Calculate RMSE
sarima.12.mse <- sum((sarima.12.pred$pred - ts.test)**2) / length(sarima.12.pred$pred)
sarima.12.mse
summary(sarima.12.fit)
mutual_knn_graph <- function(X, nn = 10){
D <- as.matrix( dist(X) ) # matrix of euclidean distances between data points in X
# intialize the knn matrix
knn_mat <- matrix(0,nrow = nrow(X),ncol = nrow(X))
# find the 10 nearest neighbors for each point
for (i in 1: nrow(X)) {
neighbor_index <- order(D[i,])[1:(nn + 1)]
knn_mat[i,][neighbor_index] <- 1
}
# Now we note that i,j are neighbors iff K[i,j] = 1 or K[j,i] = 1
knn_mat <- knn_mat + t(knn_mat) # find mutual knn
knn_mat[ knn_mat == 2 ] = 1
return(knn_mat)
}
graph_laplacian <- function(G){
d = colSums(G) # degrees of vertices
n = nrow(G)
return( diag(d) - G )
}
## simulate data
n = 100
## simulate data with radius .3
r = rnorm(n,mean=.2,sd=.03)
theta = seq(0,2*pi,length.out = n)+rnorm(n,0,sd=.01)
X1 = cbind(r*cos(theta),r*sin(theta))
## simulate data with radius 1
r = rnorm(n,mean=.5,sd=.03)
theta = seq(0,2*pi,length.out = n)+rnorm(n,0,sd=.01)
X2 = cbind(r*cos(theta),r*sin(theta))
## simulate data with radius 2
r = rnorm(n,mean=.9,sd=.03)
theta = seq(0,2*pi,length.out = n)+rnorm(n,0,sd=.01)
X3 = cbind(r*cos(theta),r*sin(theta))
X = rbind(X1,X2,X3)
plot(X[,1],X[,2])
mutual_knn_graph <- function(X, nn = 10){
D <- as.matrix( dist(X) ) # matrix of euclidean distances between data points in X
# intialize the knn matrix
knn_mat <- matrix(0,nrow = nrow(X),ncol = nrow(X))
# find the 10 nearest neighbors for each point
for (i in 1: nrow(X)) {
neighbor_index <- order(D[i,])[1:(nn + 1)]
knn_mat[i,][neighbor_index] <- 1
}
# Now we note that i,j are neighbors iff K[i,j] = 1 or K[j,i] = 1
knn_mat <- knn_mat + t(knn_mat) # find mutual knn
knn_mat[ knn_mat == 2 ] = 1
return(knn_mat)
}
graph_laplacian <- function(G){
d = colSums(G) # degrees of vertices
n = nrow(G)
return( diag(d) - G )
}
## simulate data
n = 100
## simulate data with radius .3
r = rnorm(n,mean=.2,sd=.03)
theta = seq(0,2*pi,length.out = n)+rnorm(n,0,sd=.01)
X1 = cbind(r*cos(theta),r*sin(theta))
## simulate data with radius 1
r = rnorm(n,mean=.5,sd=.03)
theta = seq(0,2*pi,length.out = n)+rnorm(n,0,sd=.01)
X2 = cbind(r*cos(theta),r*sin(theta))
## simulate data with radius 2
r = rnorm(n,mean=.9,sd=.03)
theta = seq(0,2*pi,length.out = n)+rnorm(n,0,sd=.01)
X3 = cbind(r*cos(theta),r*sin(theta))
X = rbind(X1,X2,X3)
plot(X[,1],X[,2])
W = mutual_knn_graph(X) # 1. matrix of similarities
L = graph_laplacian(W) # 2. compute graph laplacian
ei = eigen(L, symmetric = TRUE) # 3. Compute the eigenvectors and values of L
N = nrow(L)
plot(ei$values[(N-9):N])
X_sc = ei$vectors[,(N - 2):(N-1)]
plot(ei$vectors[,N])
plot(ei$vectors[,N-1])
plot(ei$vectors[,N-2])
X_sc_kmeans <- kmeans(X_sc, 3,nstart=10,iter.max=200)
plot(X[,1],X[,2],col=X_sc_kmeans$cluster)
plot(X_sc)
plot(X_sc[,1],X_sc[,2])
mutual_knn_graph <- function(X, nn = 20){
D <- as.matrix( dist(X) ) # matrix of euclidean distances between data points in X
# intialize the knn matrix
knn_mat <- matrix(0,nrow = nrow(X),ncol = nrow(X))
# find the 10 nearest neighbors for each point
for (i in 1: nrow(X)) {
neighbor_index <- order(D[i,])[1:(nn + 1)]
knn_mat[i,][neighbor_index] <- 1
}
# Now we note that i,j are neighbors iff K[i,j] = 1 or K[j,i] = 1
knn_mat <- knn_mat + t(knn_mat) # find mutual knn
knn_mat[ knn_mat == 2 ] = 1
return(knn_mat)
}
graph_laplacian <- function(G){
d = colSums(G) # degrees of vertices
n = nrow(G)
return( diag(d) - G )
}
## simulate data
n = 100
## simulate data with radius .3
r = rnorm(n,mean=.2,sd=.03)
theta = seq(0,2*pi,length.out = n)+rnorm(n,0,sd=.01)
X1 = cbind(r*cos(theta),r*sin(theta))
## simulate data with radius 1
r = rnorm(n,mean=.5,sd=.03)
theta = seq(0,2*pi,length.out = n)+rnorm(n,0,sd=.01)
X2 = cbind(r*cos(theta),r*sin(theta))
## simulate data with radius 2
r = rnorm(n,mean=.9,sd=.03)
theta = seq(0,2*pi,length.out = n)+rnorm(n,0,sd=.01)
X3 = cbind(r*cos(theta),r*sin(theta))
X = rbind(X1,X2,X3)
plot(X[,1],X[,2])
W = mutual_knn_graph(X) # 1. matrix of similarities
L = graph_laplacian(W) # 2. compute graph laplacian
ei = eigen(L, symmetric = TRUE) # 3. Compute the eigenvectors and values of L
N = nrow(L)
plot(ei$values[(N-9):N])
X_sc = ei$vectors[,(N - 2):(N-1)]
plot(ei$vectors[,N])
plot(ei$vectors[,N-1])
plot(ei$vectors[,N-2])
X_sc_kmeans <- kmeans(X_sc, 3,nstart=10,iter.max=200)
plot(X[,1],X[,2],col=X_sc_kmeans$cluster)
plot(X_sc)
plot(X_sc[,1],X_sc[,2])
help(:=)
help(:=)
help(seq)
par(mfrow = c(1,3), mar=c(2,1,2,1))
x <- seq(-4, 4, length=1000)
plot(x, dnorm(x), axes = FALSE,
xlab=expression(plain('(a)')),
ylab'', type='l')
abline(h=0)
abline(v=0)
axis(1, at=-1,
labels=expression(italic('parameter')),
lwd=3)
axis(2, at=0, labels=expression(italic('estimator')))
par(mfrow = c(1,3), mar=c(2,1,2,1))
x <- seq(-4, 4, length=1000)
plot(x, dnorm(x), axes = FALSE,
xlab=expression(plain('(a)')),
ylab'', type='l')
abline(h=0)
abline(v=0)
axis(1, at=-1,
labels=expression(italic('parameter')),
lwd=3)
axis(2, at=0, labels=expression(italic('estimator')))
# Produce Biased - Unbiased Plots
par(mfrow = c(1,3), mar=c(2,1,2,1))
x <- seq(-4, 4, length=1000)
plot(x, dnorm(x), axes = FALSE,
xlab=expression(plain('(a)')),
ylab='', type='l')
abline(h=0)
abline(v=0)
axis(1, at=-1,
labels=expression(italic('parameter')),
lwd=3)
axis(2, at=0, labels=expression(italic('estimator')))
# Load Crime Data ----------------------------------------------------
crime
# Load Crime Data ----------------------------------------------------
crime_data = data(crime)
# Load Crime Data ----------------------------------------------------
data("crimtab")
crimtab
help(trim)
data("ChickWeight")
summary(ChickWeight)
col_names(ChickWeight)
cols(ChickWeight)
colnames(ChickWeight)
plot(weight, Time, ChickWeight)
plot(ChickWeight$weight, ChickWeight$Time)
plot(ChickWeight$weight, ChickWeight$Time, type='s')
plot(ChickWeight$weight, ChickWeight$Time, type='l')
ChickWeight$Time
plot(ChickWeight)
plot.scatter(ChickWeight)
plot(ChickWeight, type='scatter')
print(pwd)
pwd
getwd(0)
getwd()
setwd('/home/cc2/Desktop/repositories/gsu_legal_analytics_course/hw/hw3')
getwd()
############################################################################
# Load Libraries
############################################################################
library(quanteda)
############################################################################
# Load Libraries
############################################################################
install.packages(quanteda)
############################################################################
# Load Libraries
############################################################################
install.packages("quanteda")
############################################################################
# Load Libraries
############################################################################
library("quanteda")
############################################################################
# Load Libraries
############################################################################
install.packages("quanteda")
############################################################################
# Load Libraries
############################################################################
library("quanteda")
############################################################################
# Load Libraries
############################################################################
library(quanteda)
