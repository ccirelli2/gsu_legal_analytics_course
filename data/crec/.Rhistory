sum_earned = sum(Earned),
cnt = n())
df.grouped$LossRatio <- df.grouped$sum_incurred / df.grouped$sum_earned
df.grouped
df.grouped$PctNum <- df.grouped$cnt / sum(df.grouped$cnt)
df.grouped
df.grouped$PctNum <- df.grouped$cnt / sum(df.grouped$cnt) * 100
df.grouped
clusplot(df.pca, fit.kmeans$cluster, color=TRUE, shade=TRUE,
labels=0, lines=0)
fviz_cluster(fit.kmeans, data = df.pca)
#########################################################
# Kmeans
#########################################################
fit.kmeans <- kmeans(df.pca, 4, nstart=25)
fviz_cluster(fit.kmeans, data = df.pca)
fviz_cluster(fit.kmeans, data = df.pca)
clusplot(df.pca, fit.kmeans$cluster, color=TRUE, shade=TRUE,
labels=0, lines=0)
#########################################################
# Kmeans
#########################################################
fit.kmeans <- kmeans(df.pca, 4, nstart=25)
df.pca$Cluster <- fit.kmeans$cluster
df.pca$Incurred <- data.subset$Incurred
df.pca$Earned <- data.subset$Earned
df.grouped <- df.pca %>% group_by(Cluster)%>% summarise(sum_incurred = sum(Incurred),
sum_earned = sum(Earned),
cnt = n())
df.grouped$LossRatio <- df.grouped$sum_incurred / df.grouped$sum_earned
df.grouped$PctNum <- df.grouped$cnt / sum(df.grouped$cnt) * 100
df.grouped
#########################################################
# Kmeans
#########################################################
fit.kmeans <- kmeans(df.pca, 10, nstart=25)
clusplot(df.pca, fit.kmeans$cluster, color=TRUE, shade=TRUE,
labels=0, lines=0)
fviz_cluster(fit.kmeans, data = df.pca)
df.pca$Cluster <- fit.kmeans$cluster
df.pca$Incurred <- data.subset$Incurred
df.pca$Earned <- data.subset$Earned
df.grouped <- df.pca %>% group_by(Cluster)%>% summarise(sum_incurred = sum(Incurred),
sum_earned = sum(Earned),
cnt = n())
df.grouped$LossRatio <- df.grouped$sum_incurred / df.grouped$sum_earned
df.grouped$PctNum <- df.grouped$cnt / sum(df.grouped$cnt) * 100
df.grouped
#########################################################
# Kmeans
#########################################################
fit.kmeans <- kmeans(df.pca, 3, nstart=25)
clusplot(df.pca, fit.kmeans$cluster, color=TRUE, shade=TRUE,
labels=0, lines=0)
df.pca <- subset(df.pca, select = -c(PC3, PC4, PC5, PC6))
#########################################################
# Kmeans
#########################################################
fit.kmeans <- kmeans(df.pca, 3, nstart=25)
clusplot(df.pca, fit.kmeans$cluster, color=TRUE, shade=TRUE,
labels=0, lines=0)
#########################################################
# Kmeans
#########################################################
fit.kmeans <- kmeans(df.pca, 4, nstart=25)
clusplot(df.pca, fit.kmeans$cluster, color=TRUE, shade=TRUE,
labels=0, lines=0)
#########################################################
# Kmeans
#########################################################
fit.kmeans <- kmeans(df.pca, 6, nstart=25)
clusplot(df.pca, fit.kmeans$cluster, color=TRUE, shade=TRUE,
labels=0, lines=0)
fviz_cluster(fit.kmeans, data = df.pca)
# Add Back Earned & Incurred
df.pca$Cluster <- fit.kmeans$cluster
df.pca$Incurred <- data.subset$Incurred
df.pca$Earned <- data.subset$Earned
df.grouped <- df.pca %>% group_by(Cluster)%>% summarise(sum_incurred = sum(Incurred),
sum_earned = sum(Earned),
cnt = n())
df.grouped$LossRatio <- df.grouped$sum_incurred / df.grouped$sum_earned
df.grouped$PctNum <- df.grouped$cnt / sum(df.grouped$cnt) * 100
df.grouped
library(data.table)
DT = data.table(
ID = c("b","b","b","a","a","c"),
a = 1:6,
b = 7:12,
c = 13:18)
DT
dt<- data.table(
id = c("b","b","b","a","a","c"),
a = 1:6,
b = 7:12,
c = 13:18)
dt
dt[, surplus := TRUE]
dt
devtools::install_github("jakobbossek/ecr2")
pkgbuild::check_build_tools(debug = TRUE)
devtools::install_github("jakobbossek/ecr")
install.library(devtools)
install.packages("devtools")
install.packages("renv")
renv::install("jakobbossek/ecr2")
library(ecr)
# Find Global Minima of Ackley-Funciton
fn = makeAckleyFunction(1L)
autoplot(fn, show.optimum=TRUE, length.out = 1000)
library(ggplot2)
library(smoof)
# Find Global Minima of Ackley-Funciton
fn = makeAckleyFunction(1L)
autoplot(fn, show.optimum=TRUE, length.out = 1000)
# Import the stringr package
install.packages("tidyverse")
library(stringr)
# Arbitrary example placeholder texts.
texts <- c(
"The State intends to seek the death Penalty against defendant, Dr. Who, and hereby gives written notice.",
"8/12/1990 - The state of Florida intends to seek the Death Penalty against defendant and hereby gives written notice.",
"The State does not intend to seek the death penalty against defendant, Obi Wan Kenobi.",
"The state intend to seek the death penalty against defendant, Tyrion Lannister, and hereby gives written notice on 10/11/2011.",
"4/1/99 - The State of Alaska intends to seek the Death penalty for the First Degree Murder(s) charged in this case."
)
# Preview and inspect the text before going further.
texts
texts[1]
texts[2]
str_view(texts)
str_view(
string = texts,
pattern = "the"
)
str_view_all(
string = texts,
pattern = "the"
)
str_view_all(
string = texts,
pattern = " "
)
str_view_all(
string = texts,
pattern = "Dr. Who"
)
# Edit and run the code below in such a way that the phrase
# "intend to" is highlighted in the appropriate text.
str_view_all(
string = texts,
pattern = "intend to"
)
str_view_all(
string = texts,
pattern = "death penalty"
)
str_view_all(
string = texts,
pattern = "(death penalty)|(Death Penalty)"
)
str_view_all(
string = texts,
pattern = "(death|Death) (penalty|Penalty)"
)
str_view_all(
string = texts,
pattern = "(d|D)eath (p|P)enalty"
)
str_view_all(
string = texts,
pattern = regex( "death penalty" )
)
str_view_all(
string = texts,
pattern = regex( "death penalty" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "the state" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "death penalty" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "death." , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "death...." , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "death.*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "death.+" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "death.*" , ignore_case = TRUE)
)
# {minimum , }
str_view_all(
string = texts,
pattern = regex( "death.{7,}" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "death\\s\\w\\w\\w" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "death\\s\\w{5}" , ignore_case = TRUE)
)
ts individually
str_view_all(
string = texts,
pattern = regex( "\\d" , ignore_case = TRUE)
)
# Attempt to identify all digits individually
str_view_all(
string = texts,
pattern = regex( "\\d/" , ignore_case = TRUE)
)
# Attempt to identify all digits individually
str_view_all(
string = texts,
pattern = regex( "\\dd/" , ignore_case = TRUE)
)
# Attempt to identify all digits individually
str_view_all(
string = texts,
pattern = regex( "\\d./" , ignore_case = TRUE)
)
antifier
str_view_all(
string = texts,
pattern = regex( "\\d+" , ignore_case = TRUE)
)
# Add in the "/" that separates date components
str_view_all(
string = texts,
pattern = regex( "\\d+/" , ignore_case = TRUE)
)
# Write out full pattern to capture the M / D / Y of the dates
str_view_all(
string = texts,
pattern = regex( "\\d+/\\d+/\\d+" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "\\d+(/\\d+){2}" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State\\w" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State.\\s" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State." , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State.\\s" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State.\\s*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State.\\s.*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State.\\s*." , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State.\\s+." , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State.\\s." , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State.\\s*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State\\w\\s*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State\\s\\w*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State\\w*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State\\s*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State\\s+" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State\\s+\\w+" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "(The State\\s+\\w+){3}" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "(The State\\s+\\w+)" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "(The State\\s+\\w+)*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "(The State\\s+\\w+)" , ignore_case = TRUE)
)
+#########################################
##### Part 5 - Positional arguments #####
# Cheat sheet: see "ANCHORS" and "LOOKAROUNDS"
# In some instances, you will want to include the very beginning
# or the very end of an entire string as your criterion.  This is
# where "anchors" come into play.
# This pattern simply collects the entire string ("." = any character, "*" = any number or quantity)
str_view_all(
string = texts,
pattern = regex( ".*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "(The State\\s+\\w+)" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "(The State\\s+\\w+)+" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "(The State\\s+\\w+\\s+)" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "(The State\\s+\\w+\\s+){3}" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State(\\s+\\w+\\s+){3}" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State(\\s+\\w+\\s+)" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State(\\s+\\w+\\s+)*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State\\s+(\\w+\\s+)*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "The State\\s+(\\w+\\s+){3}" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( ".*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "\\d" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "^\\d" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "^\\d.*" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( ".*\\d$" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( ".*\\d\\.$" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "(?<=not )intend.* to seek the death penalty" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "(?<=not.{1,100})death penalty" , ignore_case = TRUE)
)
str_view_all(
string = texts,
pattern = regex( "(?<!not.{1,100})death penalty" , ignore_case = TRUE)
)
load("C:/Users/chris.cirelli/Desktop/repositories/gsu_legal_analytics_course/data/2018_2020_workspace2.RData")
#### PRELIMINARIES ####
library(tidyverse)
View(cr_txt)
View(cr_toks_cleaned)
txt.n10 <- txt.nall[1:10, 2]
# Text Documents
txt.nall <- readtext('CREC*')
library(tidyverse)
library(readtext)
library(quanteda)
library(text2vec)
library(sentimentr)
library(textdata)
library(textclean)
library(ggplot2)
dir_data <- 'C:\\Users\\chris.cirelli\\Desktop\\repositories\\gsu_legal_analytics_course\\data\\crec'
setwd(dir_data)
txt.nall <- readtext('CREC*')
txt.n10 <- txt.nall[1:10, 2]
txt.n50 <- txt.nall[1:50, 2]
txt.nall <- readtext('CREC*')
txt.n50 <- txt.nall[1:50, 2]
txt.n10 <- txt.nall[1:10, 2]
txt.n1 <- txt.nall[2, 2]
lookback <- '(?<=(w|W)age.{1,50})living'
lookahead <- '(?=(w|W)age.{1,50})living'
lookback <- '(?<=(w|W)age.{1,50})living'
lookahead <- 'living(?=(w|W)age.{1,50})'
living.wage <- str_extract_all(
string = txt.n10,
pattern = regex(lookahead))
living.wage.sum <- summary(living.wage)
living.wage
# How many matches did you find?
# Number of Matches
num.matches <- length(living.wage.sum[living.wage.sum == 1])
num.matches
living.wage <- str_extract_all(
string = txt.n50,
pattern = regex(lookahead))
living.wage.sum <- summary(living.wage)
living.wage
# How many matches did you find?
# Number of Matches
num.matches <- length(living.wage.sum[living.wage.sum == 1])
num.matches
living.wage <- str_extract_all(
string = txt.n50,
pattern = regex(lookback))
living.wage.sum <- summary(living.wage)
living.wage
# How many matches did you find?
# Number of Matches
num.matches <- length(living.wage.sum[living.wage.sum == 1])
num.matches
lookback <- '(?<=(w|W)age.{1,500})living'
lookahead <- 'living(?=(w|W)age.{1,500})'
living.wage <- str_extract_all(
string = txt.n50,
pattern = regex(lookback))
living.wage.sum <- summary(living.wage)
num.matches <- length(living.wage.sum[living.wage.sum == 1])
num.matches
str_replace_all(
string=txt.n1,
pattern="-\\w",
replacement = "-")
txt.clean <- str_replace_all(string=txt.n1,
pattern="-\\s",
replacement = "-")
str_extract_all(string=txt.n1,
pattern="-\\s")
str_extract_all(string=txt.clean,
pattern="-\\s")
str_extract_all(string=txt.n1,
pattern='(Mr|Ms|Mrs).*')
str_extract_all(string=txt.n1,
pattern='(Mr|Ms|Mrs)\\.\\s.+')
str_extract_all(string=txt.n1,
pattern='(Mr|Ms|Mrs)\\.\\s.+(\\.|,')
str_extract_all(string=txt.n1,
pattern='(Mr|Ms|Mrs)\\.\\s.+(\\.|,)')
speakders <- str_extract_all(string=txt.n10,
pattern='(Mr|Ms|Mrs)\\.\\s.+(\\.|,)')
speakers <- str_extract_all(string=txt.n10,
pattern='(Mr|Ms|Mrs)\\.\\s.+(\\.|,)')
speakers
